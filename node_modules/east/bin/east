#!/usr/bin/env node

'use strict';

var BaseCommand = require('commander').Command,
	Steppy = require('twostep').Steppy,
	Command = require('./commands/base').Command,
	MigrateCommand = require('./commands/migrate').Command,
	RollbackCommand = require('./commands/rollback').Command,
	ListCommand = require('./commands/list').Command;

var program = new Command();

program
	.version(require('../package.json').version)
	.option('--adapter <name>', 'which db adapter to use')
	.option('--config <path>', 'config file to use')
	.option('--timeout <timeout>', 'timeout for migrate/rollback')
	.option('--template <path>', 'path to template for new migrations')
	.option('--dir <dir>', 'dir where migrations stored')
	.option('--url <url>', 'db connect url')
	.option('--trace', 'verbose mode (includes error stack trace)')
	.option('--silent', 'prevent output of detailed log')
	.option(
		'--no-exit',
		'require a clean shutdown of the event loop: process.exit will not be ' +
		'called at the end'
	);

program
	.command(new Command('init', {initParams: {skipDirCheck: true}}))
	.description('initialize migration system')
	.asyncAction(function() {
		var callback = arguments[arguments.length - 1],
			self = this;

		Steppy(
			function() {
				self.migrator.init(this.slot());
			},
			function() {
				self.logger.info(
					'initialization successfully done, migration files will be ' +
					'stored at: `' + self.migrator.params.dir + '`'
				);
				this.pass(null);
			},
			callback
		);
	});

program.command(new Command('create <basename>'))
	.description('create new migration based on template')
	.asyncAction(function(basename, command, callback) {
		var self = this;
		Steppy(
			function() {
				// TODO: remove after removing of fallbackCommaSeparatedNames
				if (~basename.indexOf(',')) throw new Error(
					'Basename should not contain commas'
				);
				self.migrator.create(basename, this.slot());
			},
			function(err, name) {
				self.logger.info(
					'New migration `' + name + '` created at ' +
					self.migrator.getMigrationPathByName(name)
				);
				this.pass(null);
			},
			callback
		);
	});

// async action handler for migrate and rollback commands
var actionCommandAsyncAction = function(names, command, callback) {
	this.execute({names: names, command: command}, callback);
};

program
	.command(new MigrateCommand('migrate [migrations...]'))
	.option(
		'-s, --status <name>', 'which migrations execute by default (when ' +
		'particular migrations are not set), default status is `new`'
	)
	.option('-f, --force', 'force to execute already executed migrations')
	.option(
		'-t, --tag <expression>', 'execute only migrations that satisfied expression'
	)
	.description('run all or selected migrations')
	.asyncAction(actionCommandAsyncAction);

program
	.command(new RollbackCommand('rollback [migrations...]'))
	.option(
		'-s, --status <name>', 'which migrations execute by default (when ' +
		'particular migrations are not set), default status is `executed`'
	)
	.option('-f, --force', 'force to rollback not yet executed migrations')
	.option(
		'-t, --tag <expression>', 'rollback only migrations that satisfied expression'
	)
	.description('rollback all or selected migrations')
	.asyncAction(actionCommandAsyncAction);

program
	.command(new ListCommand('list [status]'))
	.option(
		'-t, --tag <expression>', 'list only migrations that satisfied expression'
	)
	.description(
		'list migration with selected status (`new`, `executed` or `all`), ' +
		'`new` by default'
	)
	.asyncAction(function(status, command, callback) {
		status = status || 'new';
		this.execute({status: status, command: command}, callback);
	});


// Default command
program
	.command(new Command('*'))
	// all unmatched args goes below, if you type `./bin foo bar` then arguments
	// will be (foo, bar, command, callback)
	.asyncAction(function(name) {
		var callback = arguments[arguments.length - 1];
		callback(new Error('Unrecognized command `' + name + '`'));
	});


// let's start the party (program entry point)
program.parse(process.argv);

if (!Command.isInitialized()) program.help();
